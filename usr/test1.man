.\" Automatically generated by Pod::Man v1.36, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BACKUP 1"
.TH BACKUP 1 "2005-06-28" "perl v5.6.1" "User Contributed Perl Documentation"
.SH "backup"
.IX Header "backup"
use Getopt::Std;
use Fcntl qw(F_SETLK);
getopts('hd:s:g:f:');
.PP
##########GLOBAL VARIABLES#######################################################
\&\f(CW$DISKID\fR = 0;
\&\f(CW$SIDE\fR = \*(L"noside\*(R";
\&\f(CW$GROUPID\fR = \*(L"nogroup\*(R";
\&\f(CW$FILEPATH\fR;	 	#input from the user
\&\f(CW$STATICPATH\fR;	 	#this is the actual spelled out path, so instead pf '.' you have
		 	#'/home/jukebox' or whatever is your current directory
\&\f(CW$FILETOCOMPRESS\fR;
\&\f(CW$COMPRESSEDFILE\fR;  	#this is the final compressed file that
		 	#will be saved in the spoole directory
\&\f(CW$FILELISTING\fR; 		#list of files inside the tar
.PP
my \f(CW$fh\fR;
\&\f(CW$QUEUEDIR\fR= \*(L"/home/jukebox/share/queue\*(R";
\&\f(CW$SPOOLDIR\fR=\*(L"/home/jukebox/share/spool\*(R";
\&\f(CW$COUNTERFILE\fR=\*(L"/home/jukebox/share/counterfile\*(R";
.PP
#################################################################################
.PP
if(! \f(CW$opt_f\fR || (! \f(CW$opt_d\fR && ! \f(CW$opt_g\fR) || ($opt_s && ! \f(CW$opt_d\fR)){
.PP
.Vb 2
\&        &help_msg;
\&}
.Ve
.PP
if($opt_d){
.PP
.Vb 2
\&        $DISKID=$opt_d;
\&        print "diskid: $DISKID\en";
.Ve
.PP
}
.PP
if($opt_s){
.PP
.Vb 3
\&        $SIDE="$opt_s";
\&        print "side: $SIDE\en";
\&        if( $SIDE  ne "a" && $SIDE ne "b" ){
.Ve
.PP
.Vb 2
\&                &help_msg;
\&        }
.Ve
.PP
}
if($opt_g){ \f(CW$GROUPID\fR = \f(CW$opt_g\fR; }
if($opt_f){ 
.PP
.Vb 2
\&        $FILEPATH=$opt_f; 
\&        if(! -e "$FILEPATH"){
.Ve
.PP
.Vb 4
\&                        print "File $FILENAME does not exists \en";
\&                        exit(-1);
\&        }
\&        elsif(-l "$FILEPATH"){
.Ve
.PP
.Vb 2
\&                        print "File $FILENAME is a symbolic link\en";
\&                        exit(-1);
.Ve
.PP
.Vb 1
\&        }
.Ve
.PP
}
.PP
######################MAIN##############################
.PP
&parseFileName;
.PP
if ( \-d \f(CW$STATICPATH\fR){
.PP
.Vb 3
\&        &tarFile;               
\&}
\&&queueWrite;
.Ve
.PP
######################SUBS##############################
.PP
sub parseFileName{
.PP
.Vb 5
\&        `cd $FILEPATH`;
\&        $STATICPATH=`cd $FILEPATH  ; pwd`;
\&        chomp($STATICPATH); #get rid of new line
\&        print "This is the relative path: $FILEPATH \en";
\&        print "This is the whole path of the directory: $STATICPATH \en";
.Ve
.PP
}
sub tarFile{
.PP
.Vb 1
\&        eval{
.Ve
.PP
.Vb 10
\&                ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime;
\&                $mon=$mon+1;
\&                $year=1900+$year;
\&                $FILETOCOMPRESS= `basename $STATICPATH`;
\&                chomp($FILETOCOMPRESS);
\&                $FILETOCOMPRESS=$FILETOCOMPRESS . $mon . '-' . $mday . '-' . $year .'-'. $hour. '.'.$min.'.'.$sec.'.' . tar.'.'.gz;
\&                print "taredfilename : $FILETOCOMPRESS\en";
\&                `tar czvf $SPOOLDIR/$FILETOCOMPRESS $STATICPATH`;
\&                $maxsize=(-s "$SPOOLDIR/$FILETOCOMPRESS")/1024;
\&                if( $maxsize > 2587590){
.Ve
.PP
.Vb 3
\&                        print "This file is too big, go save it in your home hd\en";
\&                        `rm -rf $SPOOLDIR/$FILETOCOMPRESS`;
\&                        exit(-1);
.Ve
.PP
.Vb 4
\&                } 
\&                $COMPRESSEDFILE=$FILETOCOMPRESS;                                
\&        };
\&        print $@;
.Ve
.PP
}
.PP
sub queueWrite{
.PP
.Vb 1
\&        eval{
.Ve
.PP
.Vb 2
\&                $try=0;
\&                while(!open (FILE, "+< $COUNTERFILE")){#, wait until file is unlocked, dont try more than 10 times
.Ve
.PP
.Vb 5
\&                        print "waiting to open counter file\en";
\&                        $try++;
\&                        if($try eq 11){ last;}
\&                        sleep(1);
\&                }
.Ve
.PP
.Vb 1
\&                if( $try le 10){
.Ve
.PP
.Vb 12
\&                        #lock file
\&                        #fcntl(FILE, F_SETLK, $returnedbuffer) or die "can't fcntl F_SETLK: $!";
\&                        #flock(FILE,2) or die "cannot lock file: $!" ;
\&                        defined(my $line = <FILE>) or die "premature eof";
\&                        chomp($line);
\&                        my $counter=$line;
\&                        $counter ++;
\&                        print "Jobnumber: $counter \en";                 
\&                        open JOBFILE, ">> $QUEUEDIR/$counter" or die "Cant create file: $!\en";
\&                        print JOBFILE "WRITE\en$COMPRESSEDFILE\en$GROUPID\en$DISKID\en$SIDE\en";
\&                        #update number of jobs counter
\&                        `echo $counter > $COUNTERFILE`;
.Ve
.PP
.Vb 5
\&                        close(JOBFILE);
\&                        close(FILE) ;
\&                }
\&                else{
\&                        die "Cannot open $COUNTERFILE: $!" ;
.Ve
.PP
.Vb 1
\&                }
.Ve
.PP
.Vb 1
\&        };
.Ve
.PP
.Vb 1
\&        print $@;
.Ve
.PP
}
.PP
sub help_msg{
        print \s-1STDERR\s0 \*(L"Use one of the following options combinations\en\en\*(R";
	print \s-1STDERR\s0 \*(L"1.\en\*(R";
        print \s-1STDERR\s0 \*(L"	\-d: disk to be written\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-s: side to be written\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-g: group\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-f: source file to be backed up\en\*(R";
	print \s-1STDERR\s0 \*(L"2.\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-d: disk to be written\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-s: side to be written\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-f: source file to be backed up\en\*(R";
	print \s-1STDERR\s0 \*(L"3.\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-g: group\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-f: source file to be backed up\en\*(R";
	print \s-1STDERR\s0 \*(L"4.\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-d: disk to be written\en\*(R";
	print \s-1STDERR\s0 \*(L"	\-f: source file to be backed up\en\*(R";
        \fIexit\fR\|(0);
}
